//SPDX-License-Identifier: Unlicense
pragma solidity >=0.5.0 <0.9.0;

contract crowdfunding{
    address public manager;
    mapping(address=>uint) public contributors;
    uint public minimumpay;
    uint public deadline;
    uint public noOfContri;
    uint public raisedContri;
    uint public target;

    struct request{
        string description;
        address payable recipient;
        uint value;
        bool completed;
        uint noOfVoters;
        mapping(address=>bool)voters;
    }

    mapping(uint=>request) public requests;
    uint public numrequests;

    constructor(uint _target, uint _deadline){
        target = _target;
        deadline = block.timestamp + _deadline;

        minimumpay=100;
        manager = msg.sender;
    }

    function sendEth() public payable{
        require(block.timestamp<deadline);
        require(msg.value>=minimumpay);

        if(contributors[msg.sender]==0){
            noOfContri++;
        }

        contributors[msg.sender]+=msg.value;
        raisedContri+=msg.value;

    }

    function getContractBalance() public view returns(uint){
        return address(this).balance;
    }

    function refund() public{
        require(block.timestamp>deadline && raisedContri<target);
        require(contributors[msg.sender]>0);
        address payable user = payable(msg.sender);
        user.transfer(contributors[msg.sender]);
        contributors[msg.sender]=0;
    }

    modifier onlyManager(){
        require(msg.sender==manager);
        _;
    }

    function createRequests(string memory _description,address payable _recipient,uint _value) public onlyManager{
        request storage newRequest = requests[numrequests];
        numrequests++;
        newRequest.description=_description;
        newRequest.recipient=_recipient;
        newRequest.value=_value;
        newRequest.completed=false;
        newRequest.noOfVoters=0;
    }

    function vote(uint _requestNo) public{
        require(contributors[msg.sender]>0);
        request storage thisRequest = requests[_requestNo];
        require(thisRequest.voters[msg.sender]==false);
        thisRequest.voters[msg.sender]=true;
        thisRequest.noOfVoters++;
    }

    function makepayment(uint _requestNo) public onlyManager{
        require(raisedContri>=target);
        request storage thisRequest = requests[_requestNo];
        require(thisRequest.completed==false);
        require(thisRequest.noOfVoters>noOfContri/2);
        thisRequest.recipient.transfer(thisRequest.value);
        thisRequest.completed=true;
    }

}
